{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/css.ts","../src/node/plugins/assets.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts","../src/node/server/middlewares/static.ts","../src/node/ModuleGraph.ts"],"sourcesContent":["import cac from \"cac\";\nimport { startDevServer } from \"./server\";\nconst cli = cac();\n\ncli\n  .command(\"[root]\", \"Run the development server\")\n  .alias(\"serve\")\n  .alias(\"dev\")\n  .action(async () => {\n    await startDevServer();\n  });\n\ncli.help();\n\ncli.parse();\n","import connect from \"connect\";\nimport { blue, green } from \"picocolors\";\nimport { optimize } from \"../optimizer/index\";\nimport { resolvePlugins } from \"../plugins\";\nimport { Plugin } from \"../plugin\";\nimport { createPluginContainer, PluginContainer } from \"../pluginContainer\";\nimport { indexHtmlMiddware } from \"./middlewares/indexHtml\";\nimport { transformMiddleware } from \"./middlewares/transform\";\nimport { staticMiddleware } from \"./middlewares/static\";\nimport { ModuleGraph } from \"../ModuleGraph\";\n\nexport interface ServerContext {\n  root: string;\n  pluginContainer: PluginContainer;\n  app: connect.Server;\n  plugins: Plugin[];\n  moduleGraph: ModuleGraph;\n}\n\nexport async function startDevServer() {\n  const app = connect();\n  const root = process.cwd();\n  const startTime = Date.now();\n  const plugins = resolvePlugins();\n  const pluginContainer = createPluginContainer(plugins);\n  const moduleGraph = new ModuleGraph((url) => pluginContainer.resolveId(url));\n\n  const serverContext: ServerContext = {\n    root: process.cwd(),\n    app,\n    pluginContainer,\n    plugins,\n    moduleGraph,\n  };\n\n  for (const plugin of plugins) {\n    if (plugin.configureServer) {\n      await plugin.configureServer(serverContext);\n    }\n  }\n\n  // // 核心编译逻辑\n  app.use(transformMiddleware(serverContext));\n  app.use(indexHtmlMiddware(serverContext));\n  app.use(staticMiddleware());\n\n  app.listen(3000, async () => {\n    await optimize(root);\n    console.log(\n      green(\"🚀 No-Bundle 服务已经成功启动!\"),\n      `耗时: ${Date.now() - startTime}ms`\n    );\n    console.log(`> 本地访问路径: ${blue(\"http://localhost:3000\")}`);\n  });\n}\n","import path from \"path\";\nimport { build } from \"esbuild\";\nimport { green } from \"picocolors\";\nimport { scanPlugin } from \"./scanPlugin\";\nimport { preBundlePlugin } from \"./preBundlePlugin\";\nimport { PRE_BUNDLE_DIR } from \"../constants\";\n\nexport async function optimize(root: string) {\n  // 1. 确定入口\n  const entry = path.resolve(root, \"src/main.tsx\");\n\n  // 2. 从入口处扫描依赖\n  const deps = new Set<string>();\n  await build({\n    entryPoints: [entry],\n    bundle: true,\n    write: false,\n    plugins: [scanPlugin(deps)],\n  });\n\n  console.log(\n    `${green(\"需要预构建的依赖\")}:\\n${[...deps]\n      .map(green)\n      .map((item) => `  ${item}`)\n      .join(\"\\n\")}`\n  );\n  // 3. 预构建依赖\n  await build({\n    entryPoints: [...deps],\n    write: true,\n    bundle: true,\n    format: \"esm\",\n    splitting: true,\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\n    plugins: [preBundlePlugin(deps)],\n  });\n}\n","import path from \"path\";\n\nexport const EXTERNAL_TYPES = [\n  \"css\",\n  \"less\",\n  \"sass\",\n  \"scss\",\n  \"styl\",\n  \"stylus\",\n  \"pcss\",\n  \"postcss\",\n  \"vue\",\n  \"svelte\",\n  \"marko\",\n  \"astro\",\n  \"png\",\n  \"jpe?g\",\n  \"gif\",\n  \"svg\",\n  \"ico\",\n  \"webp\",\n  \"avif\",\n];\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\n// 预构建产物默认存放在 node_modules 中的 .m-vite 目录中\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const QEURY_RE = /\\?.*$/s;\nexport const HASH_RE = /#.*$/s;\nexport const DEFAULT_EXTERSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\n","import { Plugin } from \"esbuild\";\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from \"../constants\";\n\nexport function scanPlugin(deps: Set<string>): Plugin {\n  return {\n    name: \"esbuild:scan-deps\",\n    setup(build) {\n      // 忽略的文件类型\n      build.onResolve(\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`) },\n        (resolveInfo) => {\n          return {\n            path: resolveInfo.path,\n            // 打上 external 标记\n            external: true,\n          };\n        }\n      );\n      // 记录依赖\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE,\n        },\n        (resolveInfo) => {\n          const { path: id } = resolveInfo;\n          // 推入 deps 集合中\n          deps.add(id);\n          return {\n            path: id,\n            external: true,\n          };\n        }\n      );\n    },\n  };\n}\n","import { Loader, Plugin } from \"esbuild\";\nimport { BARE_IMPORT_RE } from \"../constants\";\nimport { init, parse } from \"es-module-lexer\";\nimport path from \"path\";\nimport resolve from \"resolve\";\nimport fs from \"fs-extra\";\nimport createDebug from \"debug\";\nimport { normalizePath } from \"../utils\";\n\nconst debug = createDebug(\"dev\");\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n  return {\n    name: \"esbuild:pre-bundle\",\n    setup(build) {\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE,\n        },\n        (resolveInfo) => {\n          const { path: id, importer } = resolveInfo;\n          const isEntry = !importer;\n          // 命中需要预编译的依赖\n          if (deps.has(id)) {\n            // 若为入口，则标记 dep 的 namespace\n            return isEntry\n              ? {\n                  path: id,\n                  namespace: \"dep\",\n                }\n              : {\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\n                  path: resolve.sync(id, { basedir: process.cwd() }),\n                };\n          }\n        }\n      );\n\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\n      build.onLoad(\n        {\n          filter: /.*/,\n          namespace: \"dep\",\n        },\n        async (loadInfo) => {\n          await init;\n          const id = loadInfo.path;\n          const root = process.cwd();\n          const entryPath = resolve.sync(id, { basedir: root });\n          const code = await fs.readFile(entryPath, \"utf-8\");\n          const [imports, exports] = await parse(code);\n          let proxyModule = [];\n\n          let relativePath = normalizePath(path.relative(root, entryPath));\n          if (\n            !relativePath.startsWith(\"./\") &&\n            !relativePath.startsWith(\"../\") &&\n            relativePath !== \".\"\n          ) {\n            relativePath = `./${relativePath}`;\n          }\n          // cjs\n          if (!imports.length && !exports.length) {\n            // 构造代理模块\n            // 下面的代码后面会解释\n            const res = require(entryPath);\n            const specifiers = Object.keys(res);\n            proxyModule.push(\n              `export { ${specifiers.join(\",\")} } from \"${relativePath}\"`,\n              `export default require(\"${relativePath}\")`\n            );\n          } else {\n            // esm 格式比较好处理，export * 或者 export default 即可\n            if (exports.includes(\"default\")) {\n              proxyModule.push(\n                `import d from \"${relativePath}\";export default d`\n              );\n            }\n            proxyModule.push(`export * from \"${relativePath}\"`);\n          }\n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"));\n          const loader = path.extname(entryPath).slice(1);\n          return {\n            loader: loader as Loader,\n            contents: proxyModule.join(\"\\n\"),\n            resolveDir: root,\n          };\n        }\n      );\n    },\n  };\n}\n","import os from \"os\";\nimport path from \"path\";\nimport { JS_TYPES_RE, HASH_RE, QEURY_RE } from \"./constants\";\n\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\nexport const isWindows = os.platform() === \"win32\";\n\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(isWindows ? slash(id) : id);\n}\n\nexport const isJSRequest = (id: string): boolean => {\n  id = cleanUrl(id);\n  if (JS_TYPES_RE.test(id)) {\n    return true;\n  }\n  if (!path.extname(id) && !id.endsWith(\"/\")) {\n    return true;\n  }\n  return false;\n};\n\nexport const cleanUrl = (url: string): string =>\n  url.replace(HASH_RE, \"\").replace(QEURY_RE, \"\");\n\nexport const isCSSRequest = (id: string): boolean =>\n  cleanUrl(id).endsWith(\".css\");\nexport function isImportRequest(url: string): boolean {\n  return url.endsWith(\"?import\");\n}\nexport function removeImportQuery(url: string): string {\n  return url.replace(/\\?import$/, \"\");\n}\n","import { readFile } from \"fs-extra\";\nimport { Plugin } from \"../plugin\";\nimport { isJSRequest } from \"../utils\";\nimport esbuild from \"esbuild\";\nimport path from \"path\";\n\nexport function esbuildTransformPlugin(): Plugin {\n  return {\n    name: \"m-vite:esbuild-transform\",\n    // 加载模块\n    async load(id) {\n      if (isJSRequest(id)) {\n        try {\n          const code = await readFile(id, \"utf-8\");\n          return code;\n        } catch (e) {\n          return null;\n        }\n      }\n    },\n    async transform(code, id) {\n      if (isJSRequest(id)) {\n        const extname = path.extname(id).slice(1);\n        const { code: transformedCode, map } = await esbuild.transform(code, {\n          target: \"esnext\",\n          format: \"esm\",\n          sourcemap: true,\n          loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\n        });\n        return {\n          code: transformedCode,\n          map,\n        };\n      }\n      return null;\n    },\n  };\n}\n","import { init, parse } from \"es-module-lexer\";\nimport {\n  BARE_IMPORT_RE,\n  DEFAULT_EXTERSIONS,\n  PRE_BUNDLE_DIR,\n} from \"../constants\";\nimport { cleanUrl, isJSRequest, normalizePath } from \"../utils\";\n// magic-string 用来作字符串编辑\nimport MagicString from \"magic-string\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server/index\";\nimport { pathExists } from \"fs-extra\";\nimport resolve from \"resolve\";\nimport type { PluginContext } from \"rollup\";\n\nexport function importAnalysisPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: \"m-vite:import-analysis\",\n    configureServer(s) {\n      // 保存服务端上下文\n      serverContext = s;\n    },\n    async transform(this: PluginContext, code: string, id: string) {\n      // 只处理 JS 相关的请求\n      if (!isJSRequest(id)) {\n        return null;\n      }\n      await init;\n      // 解析 import 语句\n      const [imports] = parse(code);\n      const ms = new MagicString(code);\n\n      const { moduleGraph } = serverContext;\n      const curMod = moduleGraph.getModuleById(id)!;\n      const importedModules = new Set<string>();\n\n      // 对每一个 import 语句依次进行分析\n      for (const importInfo of imports) {\n        // 举例说明: const str = `import React from 'react'`\n        // str.slice(s, e) => 'react'\n        const { s: modStart, e: modEnd, n: modSource } = importInfo;\n        if (!modSource) continue;\n        // 静态资源\n        if (modSource.endsWith(\".svg\")) {\n          // 加上 ?import 后缀\n          const resolvedUrl = path.join(path.dirname(id), modSource);\n          ms.overwrite(modStart, modEnd, `${resolvedUrl}?import`);\n          continue;\n        }\n        // 第三方库: 路径重写到预构建产物的路径\n        if (BARE_IMPORT_RE.test(modSource)) {\n          const bundlePath = normalizePath(\n            path.join(\"/\", PRE_BUNDLE_DIR, `${modSource}.js`)\n          );\n          ms.overwrite(modStart, modEnd, bundlePath);\n          importedModules.add(bundlePath);\n        } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\n          // 直接调用插件上下文的 resolve 方法，会自动经过路径解析插件的处理\n          const resolved = await this.resolve(modSource, id);\n          if (resolved) {\n            ms.overwrite(modStart, modEnd, resolved.id);\n            importedModules.add(resolved.id);\n          }\n        }\n      }\n      moduleGraph.updateModuleInfo(curMod, importedModules);\n\n      return {\n        code: ms.toString(),\n        // 生成 SourceMap\n        map: ms.generateMap(),\n      };\n    },\n  };\n}\n","import resolve from \"resolve\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server/index\";\nimport path from \"path\";\nimport { pathExists } from \"fs-extra\";\nimport { DEFAULT_EXTERSIONS } from \"../constants\";\nimport { cleanUrl } from \"../utils\";\n\nexport function resolvePlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: \"m-vite:resolve\",\n    configureServer(s) {\n      // 保存服务端上下文\n      serverContext = s;\n    },\n    async resolveId(id: string, importer?: string) {\n      // 1. 绝对路径\n      if (path.isAbsolute(id)) {\n        if (await pathExists(id)) {\n          return { id };\n        }\n        // 加上 root 路径前缀，处理 /src/main.tsx 的情况\n        id = path.join(serverContext.root, id);\n        if (await pathExists(id)) {\n          return { id };\n        }\n      }\n      // 2. 相对路径\n      else if (id.startsWith(\".\")) {\n        if (!importer) {\n          throw new Error(\"`importer` should not be undefined\");\n        }\n        const hasExtension = path.extname(id).length > 1;\n        let resolvedId: string;\n        // 2.1 包含文件名后缀\n        // 如 ./App.tsx\n        if (hasExtension) {\n          resolvedId = resolve.sync(id, { basedir: path.dirname(importer) });\n          if (await pathExists(resolvedId)) {\n            return { id };\n          }\n        }\n        // 2.2 不包含文件名后缀\n        // 如 ./App\n        else {\n          // ./App -> ./App.tsx\n          for (const extname of DEFAULT_EXTERSIONS) {\n            try {\n              const withExtension = `${id}${extname}`;\n              resolvedId = resolve.sync(withExtension, {\n                basedir: path.dirname(importer),\n              });\n              if (await pathExists(resolvedId)) {\n                return { id: withExtension };\n              }\n            } catch (e) {\n              continue;\n            }\n          }\n        }\n      }\n      return null;\n    },\n  };\n}\n","import { readFile } from \"fs-extra\";\nimport { Plugin } from \"../plugin\";\n\nexport function cssPlugin(): Plugin {\n  return {\n    name: \"m-vite:css\",\n    load(id) {\n      // 加载\n      if (id.endsWith(\".css\")) {\n        return readFile(id, \"utf-8\");\n      }\n    },\n    // 转换逻辑\n    async transform(code, id) {\n      if (id.endsWith(\".css\")) {\n        // 包装成 JS 模块\n        const jsContent = `\n                const css = '${code.replace(/\\n/g, \"\")}';\n                const style = document.createElement(\"style\");\n                style.setAttribute(\"type\", \"text/css\");\n                style.innerHTML = css;\n                document.head.appendChild(style);\n                export default css;\n            `.trim();\n        return {\n          code: jsContent,\n        };\n      }\n      return null;\n    },\n  };\n}\n","import { Plugin } from \"../plugin\";\nimport { cleanUrl, removeImportQuery } from \"../utils\";\n\nexport function assetPlugin(): Plugin {\n  return {\n    name: \"m-vite:asset\",\n    async load(id) {\n      const cleanedId = removeImportQuery(cleanUrl(id));\n      // 这里仅处理 svg\n      if (cleanedId.endsWith(\".svg\")) {\n        return {\n          // 包装成一个 JS 模块\n          code: `export default \"${cleanedId}\"`,\n        };\n      }\n    },\n  };\n}\n","import { Plugin } from \"../plugin\";\n\nimport { esbuildTransformPlugin } from \"./esbuild\";\nimport { importAnalysisPlugin } from \"./importAnalysis\";\nimport { resolvePlugin } from \"./resolve\";\nimport { cssPlugin } from \"./css\";\nimport { assetPlugin } from \"./assets\";\nexport function resolvePlugins(): Plugin[] {\n  return [\n    resolvePlugin(),\n    esbuildTransformPlugin(),\n    importAnalysisPlugin(),\n    cssPlugin(),\n    assetPlugin(),\n  ];\n}\n","import type {\n  LoadResult,\n  PartialResolvedId,\n  SourceDescription,\n  PluginContext as RollupPluginContext,\n  ResolvedId,\n} from \"rollup\";\nimport { Plugin } from \"./plugin\";\n\nexport interface PluginContainer {\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\n  load(id: string): Promise<LoadResult | null>;\n  transform(code: string, id: string): Promise<LoadResult | null>;\n}\n\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n  // 插件上下文对象\n  // @ts-ignore 这里仅实现上下文对象的 resolve 方法\n  class Context implements RollupPluginContext {\n    async resolve(id: string, importer?: string) {\n      let out = await pluginContainer.resolveId(id, importer);\n      if (typeof out === \"string\") out = { id: out };\n      return out as ResolvedId | null;\n    }\n  }\n  // 插件容器\n  const pluginContainer: PluginContainer = {\n    async resolveId(id: string, importer?: string) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.resolveId) {\n          const newId = await plugin.resolveId.call(ctx as any, id, importer);\n          if (newId) {\n            id = typeof newId === \"string\" ? newId : newId.id;\n            return { id };\n          }\n        }\n      }\n      return null;\n    },\n    async load(id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.load) {\n          const result = await plugin.load.call(ctx, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n    async transform(code, id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.transform) {\n          const result = await plugin.transform.call(ctx, code, id);\n          if (!result) continue;\n          if (typeof result === \"string\") {\n            code = result;\n          } else if (result.code) {\n            code = result.code;\n          }\n        }\n      }\n      return { code };\n    },\n  };\n\n  return pluginContainer;\n};\n","import { NextHandleFunction } from \"connect\";\nimport { ServerContext } from \"../index\";\nimport path from \"path\";\nimport { pathExists, readFile } from \"fs-extra\";\n\nexport function indexHtmlMiddware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.url === \"/\") {\n      const { root } = serverContext;\n      // 默认使用项目根目录下的 index.html\n      const indexHtmlPath = path.join(root, \"index.html\");\n      if (await pathExists(indexHtmlPath)) {\n        const rawHtml = await readFile(indexHtmlPath, \"utf8\");\n        let html = rawHtml;\n        // 通过执行插件的 transformIndexHtml 方法来对 HTML 进行自定义的修改\n        for (const plugin of serverContext.plugins) {\n          if (plugin.transformIndexHtml) {\n            html = await plugin.transformIndexHtml(html);\n          }\n        }\n\n        res.statusCode = 200;\n        res.setHeader(\"Content-Type\", \"text/html\");\n        return res.end(html);\n      }\n    }\n    return next();\n  };\n}\n","import { NextHandleFunction } from \"connect\";\nimport { isJSRequest, cleanUrl } from \"../../utils\";\nimport { ServerContext } from \"../index\";\nimport createDebug from \"debug\";\nimport { isCSSRequest } from \"../../utils\";\nconst debug = createDebug(\"dev\");\nimport { isImportRequest } from \"../../utils\";\n\nexport async function transformRequest(\n  url: string,\n  serverContext: ServerContext\n) {\n  const { pluginContainer, moduleGraph } = serverContext;\n  url = cleanUrl(url);\n\n  let mod = await moduleGraph.getModuleByUrl(url);\n  if (mod && mod.transformResult) {\n    return mod.transformResult;\n  }\n\n  // 简单来说，就是依次调用插件容器的 resolveId、load、transform 方法\n  const resolvedResult = await pluginContainer.resolveId(url);\n  let transformResult;\n  if (resolvedResult?.id) {\n    let code = await pluginContainer.load(resolvedResult.id);\n    if (typeof code === \"object\" && code !== null) {\n      code = code.code;\n    }\n\n    // 注册模块\n    mod = await moduleGraph.ensureEntryFromUrl(url);\n\n    if (code) {\n      transformResult = await pluginContainer.transform(\n        code as string,\n        resolvedResult?.id\n      );\n    }\n  }\n\n  if (mod) {\n    mod.transformResult = transformResult;\n  }\n  return transformResult;\n}\n\nexport function transformMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.method !== \"GET\" || !req.url) {\n      return next();\n    }\n\n    const url = req.url;\n    debug(\"transformMiddleware: %s\", url);\n\n    // transform JS request\n    if (isJSRequest(url) || isCSSRequest(url) || isImportRequest(url)) {\n      // 核心编译函数\n      let result = await transformRequest(url, serverContext);\n      if (!result) {\n        return next();\n      }\n      if (result && typeof result !== \"string\") {\n        result = result.code;\n      }\n      // 编译完成，返回响应给浏览器\n      res.statusCode = 200;\n      res.setHeader(\"Content-Type\", \"application/javascript\");\n      return res.end(result);\n    }\n\n    next();\n  };\n}\n","import { NextHandleFunction } from \"connect\";\nimport { isImportRequest } from \"../../utils\";\n// 一个用于加载静态资源的中间件\nimport sirv from \"sirv\";\n\nexport function staticMiddleware(): NextHandleFunction {\n  const serveFromRoot = sirv(\"/\", { dev: true });\n  return async (req, res, next) => {\n    if (!req.url) {\n      return;\n    }\n    // 不处理 import 请求\n    if (isImportRequest(req.url)) {\n      return;\n    }\n    serveFromRoot(req, res, next);\n  };\n}\n","import { PartialResolvedId, TransformResult } from \"rollup\";\r\nimport { cleanUrl } from \"./utils\";\r\n\r\nexport class ModuleNode {\r\n  // 资源访问 url\r\n  url: string;\r\n  // 资源绝对路径\r\n  id: string | null = null;\r\n  importers = new Set<ModuleNode>();\r\n  importedModules = new Set<ModuleNode>();\r\n  transformResult: TransformResult | null = null;\r\n  lastHMRTimestamp = 0;\r\n  constructor(url: string) {\r\n    this.url = url;\r\n  }\r\n}\r\n\r\nexport class ModuleGraph {\r\n  // 资源 url 到 ModuleNode 的映射表\r\n  urlToModuleMap = new Map<string, ModuleNode>();\r\n  // 资源绝对路径到 ModuleNode 的映射表\r\n  idToModuleMap = new Map<string, ModuleNode>();\r\n\r\n  constructor(\r\n    private resolveId: (url: string) => Promise<PartialResolvedId | null>\r\n  ) {}\r\n\r\n  getModuleById(id: string): ModuleNode | undefined {\r\n    return this.idToModuleMap.get(id);\r\n  }\r\n\r\n  async getModuleByUrl(rawUrl: string): Promise<ModuleNode | undefined> {\r\n    const { url } = await this._resolve(rawUrl);\r\n    return this.urlToModuleMap.get(url);\r\n  }\r\n\r\n  async ensureEntryFromUrl(rawUrl: string): Promise<ModuleNode> {\r\n    const { url, resolvedId } = await this._resolve(rawUrl);\r\n    // 首先检查缓存\r\n    if (this.urlToModuleMap.has(url)) {\r\n      return this.urlToModuleMap.get(url) as ModuleNode;\r\n    }\r\n    // 若无缓存，更新 urlToModuleMap 和 idToModuleMap\r\n    const mod = new ModuleNode(url);\r\n    mod.id = resolvedId;\r\n    this.urlToModuleMap.set(url, mod);\r\n    this.idToModuleMap.set(resolvedId, mod);\r\n    return mod;\r\n  }\r\n\r\n  async updateModuleInfo(\r\n    mod: ModuleNode,\r\n    importedModules: Set<string | ModuleNode>\r\n  ) {\r\n    const prevImports = mod.importedModules;\r\n    for (const curImports of importedModules) {\r\n      const dep =\r\n        typeof curImports === \"string\"\r\n          ? await this.ensureEntryFromUrl(cleanUrl(curImports))\r\n          : curImports;\r\n      if (dep) {\r\n        mod.importedModules.add(dep);\r\n        dep.importers.add(mod);\r\n      }\r\n    }\r\n    // 清除已经不再被引用的依赖\r\n    for (const prevImport of prevImports) {\r\n      if (!importedModules.has(prevImport.url)) {\r\n        prevImport.importers.delete(mod);\r\n      }\r\n    }\r\n  }\r\n\r\n  // HMR 触发时会执行这个方法\r\n  invalidateModule(file: string) {\r\n    const mod = this.idToModuleMap.get(file);\r\n    if (mod) {\r\n      // 更新时间戳\r\n      mod.lastHMRTimestamp = Date.now();\r\n      mod.transformResult = null;\r\n      mod.importers.forEach((importer) => {\r\n        this.invalidateModule(importer.id!);\r\n      });\r\n    }\r\n  }\r\n\r\n  private async _resolve(\r\n    url: string\r\n  ): Promise<{ url: string; resolvedId: string }> {\r\n    const resolved = await this.resolveId(url);\r\n    const resolvedId = resolved?.id || url;\r\n    return { url, resolvedId };\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}